--Пусть в таблице users поля created_at и updated_at оказались незаполненными. 
--Заполните их текущими датой и временем.
DROP DATABASE IF EXISTS test;
CREATE DATABASE test;
USE test;
DROP TABLE IF EXISTS users;
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) COMMENT 'Имя покупателя',
  birthday_at DATE COMMENT 'Дата рождения',
  created_at DATETIME,
  updated_at DATETIME
) COMMENT = 'Покупатели';

SHOW tables;

INSERT INTO
  users (name, birthday_at, created_at, updated_at)
VALUES
  ('Genadi', '1990-10-05', NULL, NULL),
  ('Natasha', '1984-11-12', NULL, NULL),
  ('Alexey', '1985-05-20', NULL, NULL),
  ('Sergey', '1988-02-14', NULL, NULL),
  ('Ivan', '1998-01-12', NULL, NULL),
  ('Marina', '2006-08-29', NULL, NULL);
SELECT * FROM users;

UPDATE users SET created_at = NOW();
UPDATE users SET updated_at = NOW() WHERE id < 10;
SELECT * FROM users;

--Вариант
UPDATE 
  users
SET
  created_at = NOW(),
  updated_at = NOW();

-------------------------------------------------
--Таблица users была неудачно спроектирована. 
--Записи created_at и updated_at были заданы типом VARCHAR 
--и в них долгое время помещались значения в формате 20.10.2017 8:10. 
--Необходимо преобразовать поля к типу DATETIME, сохранив введённые ранее значения.

USE test;
DROP TABLE IF EXISTS users;
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) COMMENT '',
  birthday_at DATE COMMENT '',
  created_at VARCHAR(255),
  updated_at VARCHAR(255)
) COMMENT = 'Buy';
SHOW tables;

INSERT INTO
  users (name, birthday_at, created_at, updated_at)
VALUES
  ('Genadi', '1990-10-05', '07.01.2016 12:05', '07.01.2016 12:05'),
  ('Natalya', '1984-11-12', '20.05.2016 16:32', '20.05.2016 16:32'),
  ('Alex', '1985-05-20', '14.08.2016 20:10', '14.08.2016 20:10'),
  ('Sergey', '1988-02-14', '21.10.2016 9:14', '21.10.2016 9:14'),
  ('Ivan', '1998-01-12', '15.12.2016 12:45', '15.12.2016 12:45'),
  ('Maria', '2006-08-29', '12.01.2017 8:56', '12.01.2017 8:56');
SELECT * FROM users;

SELECT STR_TO_DATE(created_at, "%d.%m.%Y %k:%i") FROM users;
UPDATE users SET created_at = STR_TO_DATE(created_at, "%d.%m.%Y %k:%i");
ALTER TABLE users MODIFY created_at DATETIME;
SELECT STR_TO_DATE(updated_at, "%d.%m.%Y %k:%i") FROM users;
UPDATE users SET updated_at = STR_TO_DATE(updated_at, "%d.%m.%Y %k:%i");
ALTER TABLE users MODIFY updated_at DATETIME;
SELECT * FROM users;

ALTER TABLE users CHANGE COLUMN `created_at` `created_at` datetime DEFAULT current_timestamp;
ALTER TABLE users CHANGE COLUMN `updated_at` `updated_at`datetime DEFAULT current_timestamp() ON UPDATE current_timestamp();
describe users;


----------------------------------------------------
--В таблице складских запасов storehouses_products в поле value могут встречаться самые разные цифры: 0, 
--если товар закончился и выше нуля, если на складе имеются запасы. Необходимо отсортировать записи таким образом, 
--чтобы они выводились в порядке увеличения значения value. 
--Однако нулевые запасы должны выводиться в конце, после всех записей.

USE test;
DROP TABLE IF EXISTS storehouses_products;
CREATE TABLE storehouses_products (
  id SERIAL PRIMARY KEY,
  storehouse_id INT UNSIGNED,
  product_id INT UNSIGNED,
  value INT UNSIGNED COMMENT 'Запас товарной позиции на складе',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) COMMENT = 'Запасы на складе';

INSERT INTO
  storehouses_products (storehouse_id, product_id, value)
VALUES
  (1, 543, 0),
  (1, 789, 2500),
  (1, 3432, 0),
  (1, 826, 30),
  (1, 719, 500),
  (1, 638, 1);
 
 SELECT id, storehouse_id, product_id, value FROM storehouses_products ORDER BY CASE WHEN value = 0 then 1 else 0
end, value;

--Вариант ORDER BY( IF(value > 0, да вернуть 0, нет вернуть 1), value)
SELECT * FROM storehouses_products ORDEBY IF (value > 0, 0, 1), value;

--Ещё проще
SELECT * FROM storehouses_products ORDEBY value = 0, value;


---------------------------------------------------------
--(по желанию) Из таблицы users необходимо извлечь пользователей, родившихся в августе и мае.
--Месяцы заданы в виде списка английских названий (may, august)

USE test;
SELECT name, birthday_at FROM users WHERE DATE_FORMAT (birthday_at, '%M') IN ('may', 'august');

--Вариант
SELECT 
	name, birthday_at,
	CASE 
		WHEN DATE_FORMAT(birthday_at, '%m') = 05 THEN 'May'
		WHEN DATE_FORMAT(birthday_at, '%m') = 08 THEN 'August'
	END AS mounth
FROM 
	users WHERE DATE_FORMAT(birthday_at, '%m') = 05 OR DATE_FORMAT(birthday_at, '%m') = 08;

---------------------------------------------------------
--(по желанию) Из таблицы catalogs извлекаются записи при помощи запроса.
-- SELECT * FROM catalogs WHERE id IN (5, 1, 2); Отсортируйте записи в порядке, заданном в списке IN.

USE test;
DROP TABLE IF EXISTS catalogs;
CREATE TABLE catalogs (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL
) COMMENT = 'Каталог';

INSERT INTO catalogs VALUES
  (NULL, 'CPU'),
  (NULL, 'Mother broad'),
  (NULL, 'Video card'),
  (NULL, 'Hard disk'),
  (NULL, 'SSD');

SELECT * FROM catalogs WHERE id IN (5, 1, 2)
ORDER BY CASE 
	WHEN id = 5 THEN 0
	WHEN id = 1 THEN 1
	WHEN id = 2 THEN 2
END;

--Вариант с функцией FIELD где id соответствует со списком в IN()
SELECT * FROM catalogs WHERE id IN (5, 1, 2) ORDER BY FIELD(id, 5, 1, 2);


-------------------------------«Агрегация данных»-----------------------------
--Подсчитайте средний возраст пользователей в таблице users.

SELECT ROUND(AVG((TO_DAYS(NOW()) - TO_DAYS(birthday_at)) / 365.25), 0) AS AVG_Age FROM users;

--вариант
SELECT AVG(TIMESTAMPDIFF(YEAR, birthday_at, NOW())) AS age FROM users;
SELECT ROUND(AVG(TIMESTAMPDIFF(YEAR, birthday_at, NOW())), 0) AS AVG_Age FROM users;


-------------------------------«Агрегация данных»-----------------------------
--Подсчитайте количество дней рождения, которые приходятся на каждый из дней недели. 
--Следует учесть, что необходимы дни недели текущего года, а не года рождения.

SELECT
	DATE_FORMAT(DATE(CONCAT_WS('-', YEAR(NOW()), MONTH(birthday_at), DAY(birthday_at))), '%W') AS day,
	COUNT(*) AS total
FROM
	users
GROUP BY
	day
ORDER BY
	total DESC;


-------------------------------«Агрегация данных»-----------------------------
--(по желанию) Подсчитайте произведение чисел в столбце таблицы.

SELECT ROUND(EXP(SUM(LN(id)))) FROM catalogs;

--Вариант
SELECT ROUND(exp(SUM(LN(id))), 0) AS factorial FROM catalogs;

--Вариант
SELECT ROUND(exp(SUM(log(id))), 0) AS factorial FROM catalogs;











